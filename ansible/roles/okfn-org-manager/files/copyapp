#!/bin/sh
#
# copyapp <src> <dst>
#
# This script is used to copy the database and assets from one Heroku
# application to another. It is run nightly to sync the staging instance with
# the production database and media.
#
# In addition to the command line arguments, which should be the names of Heroku
# applications, the command also modifies its behaviour in response to the
# setting of two environment variables:
#
#   DRYRUN - If DRYRUN is set to a nonblank value, then the command won't
#            perform any actions, but instead will print details of what it
#            would do.
#
#   QUIET - If QUIET is set to a nonblank value, the command will not print
#           any output except in the event that an error is encountered. This is
#           suitable for use when running the script as a cronjob.
#

: ${DRYRUN:=}
: ${QUIET:=}

set -e

usage () {
  echo "Usage: $0 <src> <dst>" >&2
}

status () {
  if [ -z "$QUIET" ]; then
    echo "---> ${@}" >&2
  fi
}

maybe () {
  if [ -n "$DRYRUN" ]; then
    echo "$@"
  else
    "$@"
  fi
}

quietly () {
  local out
  if [ -n "$QUIET" ]; then
    if ! out=$("$@" 2>&1); then
      echo "ERROR while running '$@':" >&2
      echo "$out"
      exit 1
    fi
  else
    "$@"
  fi
}

syncassets () {
  local srcapp=$1
  local dstapp=$2
  local srcbucket=$(heroku config:get -a "$srcapp" AWS_STORAGE_BUCKET_NAME)
  local dstbucket=$(heroku config:get -a "$dstapp" AWS_STORAGE_BUCKET_NAME)
  local args="--acl public-read"
  if [ -n "$DRYRUN" ]; then
    args="$args --dryrun"
  fi
  if [ -n "$QUIET" ]; then
    args="$args --quiet"
  fi
  aws s3 sync $args "s3://$srcbucket" "s3://$dstbucket"
}

SRC_APP=$1
DST_APP=$2

set -u

if [ "$#" -ne 2 ]; then
  usage
  exit 1
fi

status "making backup of destination database"
maybe quietly heroku pg:backups capture -e -a "$DST_APP"

status "enabling maintenance mode on destination app"
maybe quietly heroku maintenance:on -a "$DST_APP"

status "removing existing destination database"
maybe quietly heroku pg:reset DATABASE_URL -a "$DST_APP" --confirm

status "transferring data from source to destination"
maybe quietly heroku pgbackups:transfer -a "$DST_APP" --confirm "$DST_APP" \
  "$SRC_APP"::DATABASE_URL DATABASE_URL

status "syncing asset buckets"
syncassets "$SRC_APP" "$DST_APP"

status "disabling maintenance mode on destination app"
maybe quietly heroku maintenance:off -a "$DST_APP"
