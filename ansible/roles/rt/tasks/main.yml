
- name: Install RT pre-reqs through apt-get
  apt: pkg={{ item }} state=installed update_cache=yes
  with_items:
  - build-essential
  - postgresql-client
  - mailutils
  - openssl
  - libyaml-perl
  - libyaml-appconfig-perl
  - libssl-dev
  - libexpat1-dev
  - libdbd-mysql-perl
  - libnet-smtp-ssl-perl
  - libdatetime-event-ical-perl
  - libdbd-pg-perl
  - procmail
  - spawn-fcgi
  - unzip

- name: check if RT is installed
  stat: path=/opt/rt4/.installed
  register: rt_exists

- name: get latest RT release
  get_url: url=https://download.bestpractical.com/pub/rt/release/rt-{{ rt_version }}.tar.gz dest=/opt/
  when: rt_exists.stat.exists == false

- name: extract RT
  unarchive: src=/opt/rt-{{ rt_version }}.tar.gz dest=/opt/ copy=no
  when: rt_exists.stat.exists == false

- name: copy rt dir to rt4 dir
  command: mv /opt/rt-{{ rt_version }} /opt/rt4-install
  register: rtdirectory
  when: rt_exists.stat.exists == false

- name: configure RT install
  command: ./configure
  args:
    chdir: /opt/rt4-install
  when: rt_exists.stat.exists == false

- name: configure cpan
  command: perl -MCPAN -e 'my $c = "CPAN::HandleConfig"; $c->load(doit => 1, autoconfig => 1); $c->edit(prerequisites_policy => "follow"); $c->edit(build_requires_install_policy => "yes"); $c->commit'
  args:
    chdir: /opt/rt4-install
  async: 3600
  poll: 60
  when: rt_exists.stat.exists == false

- name: install RTx to install RT extensions
  command: /usr/bin/perl -MCPAN -e 'install Module::Install::RTx::Runtime'
  when: rt_exists.stat.exists == false

- name: make fixdeps
  shell: cd /opt/rt4-install && make fixdeps
  async: 3600
  poll: 60
  when: rt_exists.stat.exists == false

- name: make install
  command: make install
  args:
    chdir: /opt/rt4-install
  when: rt_exists.stat.exists == false

# Extra plugins
# To add an extra plugin, just add it to the with_items below
# Make sure you copy the format in the with items
# It assumes you pick-up the files from github
# Make sure you check the play after each plugin is added

- name: make directories to put the plugins in
  file: path=/opt/{{ item }} state=directory
  with_items:
    - RT-Extension-ActivityReports
    - rt-extension-commandbymail
    - rt-extension-nagios
    - rt-extension-mergeusers
    - rt-extension-repeatticket
    - rt-extension-resetpassword
    - rt-extension-spawnlinkedticketinqueue
  when: rt_exists.stat.exists == false


- name: get nagios all nagios plugins
  get_url: url={{ item.url }} dest=/opt/{{ item.name }}/master.zip
  with_items:
    - { url: 'https://github.com/bestpractical/rt-extension-activityreports/archive/master.zip', name: 'RT-Extension-ActivityReports' }
    - { url: 'https://github.com/bestpractical/rt-extension-commandbymail/archive/master.zip', name: 'rt-extension-commandbymail' }
    - { url: 'https://github.com/bestpractical/rt-extension-nagios/archive/master.zip', name: 'rt-extension-nagios' }
    - { url: 'https://github.com/bestpractical/rt-extension-mergeusers/archive/master.zip', name: 'rt-extension-mergeusers' }
    - { url: 'https://github.com/bestpractical/rt-extension-repeatticket/archive/master.zip', name: 'rt-extension-repeatticket' }
    - { url: 'https://github.com/gitpan/RT-Extension-ResetPassword/archive/master.zip', name: 'rt-extension-resetpassword' }
    - { url: 'https://github.com/bestpractical/rt-extension-spawnlinkedticketinqueue/archive/master.zip', name: 'rt-extension-spawnlinkedticketinqueue' }
  when: rt_exists.stat.exists == false

- name: extract all nagios plugins
  unarchive: src=/opt/{{ item }}/master.zip dest=/opt/ copy=no
  with_items:
    - RT-Extension-ActivityReports
    - rt-extension-commandbymail
    - rt-extension-nagios
    - rt-extension-mergeusers
    - rt-extension-repeatticket
    - rt-extension-resetpassword
    - rt-extension-spawnlinkedticketinqueue
  when: rt_exists.stat.exists == false


# Due to the way the files get extracted, everything ends up in lower-case with
# -master, hence the item names below.

- name: run perl Makefile.PL for all nagios plugins
  command: perl Makefile.PL
  args:
    chdir: /opt/{{ item }}
  with_items:
    - rt-extension-activityreports-master
    - rt-extension-commandbymail-master
    - rt-extension-nagios-master
    - rt-extension-mergeusers-master
    - rt-extension-repeatticket-master
    - RT-Extension-ResetPassword-master
    - rt-extension-spawnlinkedticketinqueue-master
  when: rt_exists.stat.exists == false

- name: run make for nagios plugins
  command: make
  args:
    chdir: /opt/{{ item }}
  with_items:
    - rt-extension-activityreports-master
    - rt-extension-commandbymail-master
    - rt-extension-nagios-master
    - rt-extension-mergeusers-master
    - rt-extension-repeatticket-master
    - RT-Extension-ResetPassword-master
    - rt-extension-spawnlinkedticketinqueue-master
  when: rt_exists.stat.exists == false

- name: run make install for nagios plugins
  command: make install
  args:
    chdir: /opt/{{ item }}
  with_items:
    - rt-extension-activityreports-master
    - rt-extension-commandbymail-master
    - rt-extension-nagios-master
    - rt-extension-mergeusers-master
    - rt-extension-repeatticket-master
    - RT-Extension-ResetPassword-master
    - rt-extension-spawnlinkedticketinqueue-master
  when: rt_exists.stat.exists == false



# We already have a DB, so no need to initialise the database

# Configure RT

- name: configure rt server
  template: src=RT_SiteConfig.pm dest=/opt/rt4/etc owner=root group=www-data mode=0660
  when: rt_exists.stat.exists == false

# Configure Procmail

- name: configure procmail
  copy: src=procmailrc.rt dest=/opt/rt4/etc/procmailrc.rt owner=root group=root mode=0644

- name: Create .installed file now that RT is installed
  file: path=/opt/rt4/.installed state=touch
  when: rt_exists.stat.exists == false

